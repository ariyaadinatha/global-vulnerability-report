from pathlib import Path
from datetime import date, datetime
import sys
import json

# The values in the template are originally hidden as HTML comments
# This function adds onto the python string replace by adding HTML comments to the string to find
# And then replacing it
def replace_comment_string(original_string, part_to_replace, new_value):
    original_string = original_string.replace(f'<!-- {part_to_replace} -->', f'{new_value}')
    return original_string

def add_vulnerability_row(original_string, vulnerability, scanner_metadata):
    title = vulnerability["name"]
    detected_date = datetime.strptime(scanner_metadata["start_time"], "%Y-%m-%dT%H:%M:%S").strftime("%B %d, %Y")
    severity = vulnerability["severity"].lower().capitalize()
    identifier = vulnerability["identifiers"][1]["name"]
    affected_file = vulnerability["location"]["file"]
    file_line = vulnerability["location"]["start_line"]
    tool = scanner_metadata["scanner"]["name"]
    row = f"""
    <tr>
        <td class="p-2">
            {detected_date}
        </td>
        <td class="p-2">
            {severity}
        </td>
        <td class="p-2 w-5/12">
            {title}
        </td>
        <td class="p-2 w-3/12">
            {affected_file}:{file_line}
        </td>
        <td class="p-2">
            {identifier}
        </td>
        <td class="p-2">
            {tool}
        </td>
    </tr>
    """
    part_to_replace = '<!-- row -->'
    original_string = original_string.replace(part_to_replace, row + '\n' + part_to_replace)
    return original_string

def get_vulnerabilities(json_file):
    # Convert The Response To JSON
    with open(json_file, 'r') as f:
        json_data = json.load(f)
    vulnerability_list = json_data["vulnerabilities"]
    scanner_metadata_list = json_data["scan"]

    return vulnerability_list, scanner_metadata_list

def convert(report_file):
    # Get The Text From The HTML Template As The String
    html_template = Path('global-vulnerability-report/template.html').read_text()

    # Update The Report Date
    today = date.today()
    formatted_date = today.strftime("%B %d, %Y")
    html_template = replace_comment_string(html_template, "@report_date", formatted_date)
    
    critical_vulnerability_count = 0
    high_vulnerability_count = 0
    medium_vulnerability_count = 0
    low_vulnerability_count = 0
    info_vulnerability_count = 0
    unknown_vulnerability_count = 0

    vulnerability_response = get_vulnerabilities(report_file)
    vulnerability_list = vulnerability_response[0]
    scanner_metadata_list = vulnerability_response[1]
    for vulnerability in vulnerability_list:
        # Add a vulnerability row to the table
        html_template = add_vulnerability_row(html_template, vulnerability, scanner_metadata_list)
        # Update the count
        severity = vulnerability["severity"].lower().capitalize()
        match severity:
            case 'Critical':
                critical_vulnerability_count+=1
            case 'High':
                high_vulnerability_count+=1
            case 'Medium':
                medium_vulnerability_count+=1
            case 'Low':
                low_vulnerability_count+=1
            case 'Info':
                info_vulnerability_count+=1               
            case 'Unknown':
                unknown_vulnerability_count+=1

    # Update The Count Variables
    html_template = replace_comment_string(html_template, "@critical_vulnerability_count", f'{critical_vulnerability_count}' )
    html_template = replace_comment_string(html_template, "@high_vulnerability_count", f'{high_vulnerability_count}' )
    html_template = replace_comment_string(html_template, "@medium_vulnerability_count", f'{medium_vulnerability_count}' )
    html_template = replace_comment_string(html_template, "@low_vulnerability_count", f'{low_vulnerability_count} ')
    html_template = replace_comment_string(html_template, "@info_vulnerability_count", f'{info_vulnerability_count}' )
    html_template = replace_comment_string(html_template, "@unknown_vulnerability_count", f'{unknown_vulnerability_count} ')

    # Save The File As HTML
    with open('sast_report.html', 'w') as html_report:
        html_report.write(html_template)

if __name__ == "__main__":
    convert(sys.argv[1])
